// Advanced exercises involving recursion

type Nat {
  zero
  succ(pred: Nat)
}

// Doubles a number
dbl(a: Nat): Nat // double
  case a
  {
    zero: Nat.zero
    succ: Nat.succ(Nat.succ(dbl(a.pred)))
  }
  


// Addition
add(a: Nat, b: Nat): Nat
  case b
  {
    zero: a
    succ: add(Nat.succ(a), b.pred)
  }


// Multiplication
mul(a: Nat, b: Nat): Nat
  case a
  {
    zero: Nat.zero
    succ: 
      case b
      {
        zero: Nat.zero
        succ: add(a, mul(a, b.pred))
      }
  }


// Subtraction
// 4 - 5 = 0
// 5 - 4 = 1
sub(a: Nat, b: Nat): Nat
  case b
  {
    zero: a
    succ: 
      case a
      {
        zero: Nat.zero
        succ: sub(a.pred, b.pred)
      }
  }



// Factorial
// 4! = 24
fac(a: Nat): Nat 
  case a
  {
    zero: Nat.succ(Nat.zero)
    succ: mul(a, fac(a.pred))
  }

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
div(a: Nat, b: Nat): Nat // division
  case a
  {
    zero: 0
    succ: 
      case b
      {
        zero: 0
        succ: 
          if a >=? b then 
            Nat.succ(div(sub(a, b), b))
          else
            div(sub(a, b), b)
      }
  }



// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case a b
  {
    zero zero: Bool.true
    succ succ: eql(a.pred, b.pred)
  } default Bool.false


// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False
gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  case a b
  {
    succ zero: Bool.true
    succ succ: gtn(a.pred, b.pred)
  } default Bool.false

// Lower than
// 1 < 2 = True
// 3 < 3 = False
ltn(a: Nat, b: Nat): Bool // if A > B == False else true 
  case a b
  {
    succ zero: Bool.false
    succ succ: ltn(a.pred, b.pred)
  } default Bool.true

