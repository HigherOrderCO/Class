// Advanced exercises involving recursion

type Nat {
  zero
  succ(pred: Nat)
}

// Doubles a number

dbl(a: Nat): Nat // double
 case a {
     zero: 0
     succ: Nat.succ(Nat.succ(dbl(a.pred)))
 }

// Addition

add(a: Nat, b: Nat): Nat
 case a {
     zero: b 
     succ: Nat.succ(add(a.pred,b))
 }

// Multiplication

mul(a: Nat, b: Nat): Nat
 case a { 
     zero: 0
     succ: Nat.add(mul(a.pred,b),b)
 }

// Subtraction

// 4 - 5 = 0
// 5 - 4 = 1
sub(a: Nat, b: Nat): Nat
 case a b {
     succ zero: a 
     succ succ : sub(a.pred, b.pred)  
}

// Factorial

// 4! = 24
fac(a: Nat): Nat 
  case a {
      zero: 1
      succ: Nat.mul(a,fac(a.pred))
  }

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2

div(a: Nat, b: Nat): Nat // division
  case a  {
      zero: 0
      succ: Nat.succ(div(Nat.sub(a,b),b))

// Equal

eql(a: Nat, b: Nat)
 case a {
     zero: case b {
         zero: true
         succ : false
     }
     succ: case b {
         zero: false
         succ: case Nat.sub(a,b){
             zero: case Nat.sub(b,a){
                 zero: true
                 succ: false
             }
             succ: false
         }
     }
 }

// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False

gtn(a: Nat, b: Nat): Bool // if A > B == True else false
  case a {
      zero: false
      succ: case Nat.sub(a,b){
          zero: false
          succ: true
      }
  }

// Lower than
// 1 < 2 = True
// 3 < 3 = False

ltn(a: Nat, b: Nat): Bool // if A > B == False else true 
  case b {
      zero: false
      succ: case Nat.sub(b,a){
          zero: false
          succ: true
      } 
  }

// Minimum
// min(2, 3) = 2
// min(4, 1) = 1

min(a: Nat, b: Nat): Nat
 case a {
     zero: Nat.zero
     succ: case b {
         zero: Nat.zero
         succ: case Nat.sub(a,b) {
             zero: case Nat.sub(b,a) {
                 zero: b // a faz mesmo efeito q a, pois a = b
                 succ: a
             }
             succ: b 
         }
     }
 }
