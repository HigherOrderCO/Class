// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs ys
  {
    cons cons: List.cons!(Pair.new!!(xs.head, ys.head), zip<A, B>(xs.tail, ys.tail))
  } default []

//ex_05:_
  //List.show<Pair<Nat, String>>(Pair.show<Nat, String>(Nat.show, Striing.show), zip<Nat, String>([1, 2, 3], ["a", "b", "c"]))  <- rever dps kkkkkk

Striing.show(a: String): String
  a
// Returns the smallest element of a List
smallest(xs: List<Nat>): Nat
  case xs
  {
    nil: 0
    cons: case xs.tail
          {
            nil: xs.head
            cons: smallest(List.cons<Nat>(sml(xs.head, xs.tail.head), xs.tail.tail))
          }
  }



sml(a: Nat, b: Nat): Nat
  case a
  {
    zero: a
    succ: case b
    {
      zero: b
      succ: Nat.succ(sml(a.pred, b.pred))
    }
  }





// // Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  case xs
  {
    nil: List.nil<Nat>
    cons: 
      if eql(xs.head, smallest(xs)) then
      xs.tail
      else
      List.cons<Nat>(xs.head, delete_smallest(xs.tail))
  }

eql(a: Nat, b: Nat): Bool
  case a b
  {
    zero zero: true
    zero succ: false
    succ zero: false
    succ succ: eql(a.pred, b.pred)
  }


   

// // Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  case xs
  {
    nil: []
    cons: List.cons!(smallest(xs), sort_ascending(delete_smallest(xs)))
  }


// // Returns an element at an index from the list
// // if there is an element at that index
// //   returns Maybe.some!(element)
// // else
// //   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  case xs
  {
    nil: Maybe.none<A>
    cons: case idx
          {
            zero: Maybe.some<A>(xs.head)
            succ: get<A>(idx.pred, xs.tail)
          }
  }

  // get(2, [0, 1, 2, 3])
  // succ: get(1, [1, 2, 3])
  //       succ: get(0, [2, 3])
  //             zero: 2

//get(5, ["a", "b", "c", "d", "e", "f"]) == Maybe.some<String>("f")



// // Removes all elements that does not match a condition
//List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  case xs
  {
    nil: []
    cons:
       if f(xs.head) then
        List.cons<A>(xs.head, filter<A>(f, xs.tail))
       else
        filter<A>(f, xs.tail)
  }

ex_05:_  
List.show!(Nat.show, List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]))
